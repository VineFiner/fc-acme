# ------------------------------------
#   欢迎您使用阿里云函数计算 FC 组件进行项目开发
#   组件仓库地址：https://github.com/devsapp/fc
#   组件帮助文档：https://www.serverless-devs.com/fc/readme
#   Yaml参考文档：https://www.serverless-devs.com/fc/yaml/readme
#   关于：
#      - Serverless Devs和FC组件的关系、如何声明/部署多个函数、超过50M的代码包如何部署
#      - 关于.fcignore使用方法、工具中.s目录是做什么、函数进行build操作之后如何处理build的产物
#   等问题，可以参考文档：https://www.serverless-devs.com/fc/tips
#   关于如何做CICD等问题，可以参考：https://www.serverless-devs.com/serverless-devs/cicd
#   关于如何进行环境划分等问题，可以参考：https://www.serverless-devs.com/serverless-devs/extend
#   更多函数计算案例，可参考：https://github.com/devsapp/awesome/
#   有问题快来钉钉群问一下吧：33947367
# ------------------------------------

edition: 1.0.0 #  命令行YAML规范版本，遵循语义化版本（Semantic Versioning）规范
name: start-fc-acme
# access 是当前应用所需要的密钥信息配置：
# 密钥配置可以参考：https://www.serverless-devs.com/serverless-devs/command/config
# 密钥使用顺序可以参考：https://www.serverless-devs.com/serverless-devs/tool#密钥使用顺序与规范
access: "default"

vars:
  region: "cn-hongkong"
  service:
    name: "fc-acme"
    description: '签发证书'
    role: acs:ram::${config(AccountID)}:role/AliyunFcDefaultRole
    # logConfig:
    #   # auto 当前地域未初始化，请使用 auto 
    #   enableRequestMetrics: true
    #   enableInstanceMetrics: true
    #   logBeginRule: None
    #   project: ${config(AccountID)}-cn-hongkong-logproject
    #   logstore: function-log
    nasConfig:
      auto
      # userId: 10003
      # groupId: 10003
      # mountPoints:
      #   - serverAddr: xxx-xxx.cn-shenzhen.nas.aliyuncs.com
      #     nasDir: /fc-acme
      #     fcDir: /mnt/auto
  functionName: "acme"
  environmentVariables:     # 为函数配置环境变量
    PYTHONPATH: '/opt/python:/code' # 自定义层 flask
    Ali_Key: ${env(Ali_Key)}
    Ali_Secret: ${env(Ali_Secret)}

services:
  fc-nas-init:
    component: fc
    props:
      region: ${vars.region} # 关于变量的使用方法，可以参考：https://www.serverless-devs.com/serverless-devs/yaml#变量赋值
      service: ${vars.service}
      function:
        name: "nas-init"
        description: 'Prepare nas'
        codeUri: './code/init'
        runtime: python3.9
        timeout: 1200
        memorySize: 256
        cpu: 0.2
        diskSize: 512
        instanceConcurrency: 1
        handler: index.handler

  fc-invoke-acme: # 业务名称/模块名称
    component: fc # 组件名称，Serverless Devs 工具本身类似于一种游戏机，不具备具体的业务能力，组件类似于游戏卡，用户通过向游戏机中插入不同的游戏卡实现不同的功能，即通过使用不同的组件实现不同的具体业务能力
    actions: # 自定义执行逻辑，关于actions 的使用，可以参考：https://www.serverless-devs.com/serverless-devs/yaml#行为描述
      post-deploy: # 在deploy之前运行
        - component: fc invoke --service-name ${fc-nas-init.output.service.name} --function-name nas-init
    props: # 组件的属性值
      region: ${vars.region}
      service: ${vars.service}
      function:
        name: ${vars.functionName} # 函数名
        description: 'acme  Function'
        layers:
          - acs:fc:cn-hongkong:official:layers/Python3-Flask2x/versions/2
        cAPort: 9000
        codeUri: './code/invoke-acme'
        runtime: custom.debian10
        handler: index.handler
        customRuntimeConfig:
          command:
            - python3
            - app.py
        timeout: 60
        memorySize: 256
        cpu: 0.25
        diskSize: 512
        instanceConcurrency: 5
        environmentVariables: ${vars.environmentVariables}  #  为函数配置环境变量
      triggers:
        - name: httpTrigger
          type: http
          config:
            authType: anonymous
            methods:
              - GET
              - POST
  keep-warm: # 辅助函数, 2 min 定时预热
    component: fc # 组件名称
    # actions:
    #   post-deploy:
    #     - component: fc invoke --service-name ${fc-invoke-acme.output.service.name} --function-name nas-init
    props: # 组件的属性值
      region: ${vars.region}
      service: ${vars.service}
      function:
        name: keep-warm
        description: 'Serverless Devs Web Framework Helper Function'
        codeUri: './code/keep-warm'
        handler: index.handler
        runtime: python3
        timeout: 120
        memorySize: 128
        environmentVariables:
          KEEP_WARM_URL: ${fc-invoke-acme.output.url.system_url}
      triggers:
        - name: timerTrigger
          type: timer
          # qualifier: LATEST    
          config:
            # 配置需要续签的域名
            payload: 'aaa.com'
            cronExpression: 'CRON_TZ=Asia/Shanghai 0 0 14 * * MON'
            enable: false # 是否定时触发, 默认不触发
#END
